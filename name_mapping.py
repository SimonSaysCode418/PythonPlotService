name_dict = {
    'resid': 'Residuen',
    'fittedvalues': 'angepasste Werte',
    'resid_energy': 'Residuen - Energie-Reg',
    # 20: 'Geschwindigkeit (km/h)',
    # 507: 'GPS-Geschwindigkeit (km/h)',
    # 271: 'Batterieleistung (kW)',
    # 4628: 'Leistung Antriebsstrang (kW)',
    'train_losses': 'Train Loss',
    'valid_losses': 'Valid Loss',
    'r2_scores': 'R²',
    'delta_forecast_kwh_rel': 'rel. Abweichung',
    'difference': 'Abweichung (kWh)',
    'difference_energy': 'Abweichung (kWh)',
    'difference_kwh': 'Abweichung (kWh)',
    'difference_rel': 'rel. Abweichung',
    'difference_rel_energy': 'rel. Abweichung',
    'target': 'Batterieverbrauch (kWh)',
    'prediction': 'Prognoseverbrauch (kWh)',
    'prediction_energy': 'Energie-Reg. - Prognoseverbrauch (kWh)',
    'battery_kwh': 'Batterieverbrauch (kWh)',
    'section': 'Sektion (von-nach)',
    'duration_s': 'Fahrdauer (s)',
    'deviation_section': 'Ø Abweichung von Sektion-Mittelwert (kWh)',
    'outlier_rate': 'Anteil Ausreißer',
    'is_overland': 'Ist Überland',

    'timestamp': 't',
    'weekday': 'Wochentag',
    'weekday_sin': 'Wochentag (sin)',
    'weekday_cos': 'Wochentag (cos)',
    'hour': 'Stunde des Tages',
    'hour_sin': "Stunde (sin)",
    "hour_cos": "Stunde (cos)",

    'distance_m': 'Fahrzeugdistanz (m)',
    'distance_osm_m': 'OSM-Distanz (m)',
    'angle_rad_sum': 'Kurven (rad)',
    'ascent_m_sum': 'Steigung (m)',
    'descent_m_sum': 'Gefälle (m)',
    'mean_gradient': 'Mittlere Steigung',
    'speed_m_s_max': 'max. Geschwindigkeit (m/s)',
    'speed_m_s_avg': 'Ø Geschwindigkeit (m/s)',
    'speed_m_s_std': 'σ Geschwindigkeit (m/s)',
    'speed_osm_m_s_avg': 'Ø max. OSM-Geschw. (m/s)',

    'temp_outside_avg': 'Außentemperatur (°C)',
    'delta_out_target_temp': 'Δ Ziel-Außentemperatur (°C)',
    'hvac_cop': 'HVAC COP',

    'lat': 'Latitude',
    'lon': 'Longitude',
    'elevation': 'Höhe (m)',

    'energy_roll': 'E Rollwiderstand (kWh)',
    'energy_aero': 'E Luftwiderstand (kWh)',
    'energy_ascent': 'E Steigung (kWh)',
    'energy_descent': 'E Gefälle (kWh)',
    'energy_accel': 'E Beschleunigung (kWh)',
    'energy_hvac': 'E HVAC (kWh)',
    4204: 'Tür 1',
    4206: 'Tür 2',
    20: 'Geschwindigkeit (km/h)'
}


def get_name(key):
    return name_dict.get(key, str(key))
